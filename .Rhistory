geom_density(lwd=0.5) +
labs(title = "Distribution Prediction Data Channel") +
theme_minimal()
pred_test_Log$Prob_Channel <- predict(model_step, wholesale_test, type = "response")
View(model_step)
pred_test_Log$Prob_Channel <- predict(model_step, wholesale_test, type = "response")
ggplot(wholesale_test, aes(x=pred_test_Log)) +
geom_density(lwd=0.5) +
labs(title = "Distribution Prediction Data Channel") +
theme_minimal()
ggplot(wholesale_test, aes(x=pred_test_Log$Prob_Channel)) +
geom_density(lwd=0.5) +
labs(title = "Distribution Prediction Data Channel") +
theme_minimal()
factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log[1:10, c("pred_channel", "target")]
factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log[, c("pred_channel", "target")]
factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log[1:10, c("pred_channel", "target")]
factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log[1:5, c("pred_channel", "target")]
factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log[1:7, c("pred_channel", "target")]
factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log[1:8, c("pred_channel", "target")]
pred_test_Log$pred_channel <- factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log
head(pred_test_Log)
factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log[1:6, c("pred_channel", "target")]
factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log[1:2, c("pred_channel", "target")]
factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log[1:15, c("pred_channel", "target")]
pred_test_Log$pred_channel <- factor(ifelse(pred_test_Log$Prob_Channel > 0.5, "Retail","Horeca"))
pred_test_Log$pred_channel <- factor(ifelse(pred_test_Log > 0.5, "Retail","Horeca"))
pred_test_Log$pred_channel <- factor(ifelse(pred_test_Log > 0.5, "Retail","Horeca"))
confusionMatrix(pred_test_Log$pred_channel, pred_test_Log$, positive = "Retail")
confusionMatrix(pred_test_Log$pred_channel, pred_test_Log$Prob_Channel, positive = "Retail")
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_class_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
confusionMatrix(pred_class_test, wholesale_test$Channel, positive = "Retail")
pred_wholesale_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_wholesale_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_wholesale_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
pred_wholesale_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
library(tidyverse)
library(caret)
library(plotly)
library(ggplot2)
library(GGally)
library(dplyr)
library(car)
library(class)
library(lmtest)
library(gtools)
wholesale <- read.csv("wholesale.csv")
head(wholesale)
glimpse(wholesale)
wholesale_clean <- wholesale %>%
mutate(Channel = ifelse(Channel == 1, "Horeca", "Retail")) %>%
mutate(Channel = as.factor(Channel),
Region = as.factor(Region))
colSums(is.na(wholesale_clean))
summary(wholesale_clean)
RNGkind(sample.kind = "Rounding")
set.seed(123)
# index sampling
index <- sample(nrow(wholesale_clean), nrow(wholesale_clean)*0.8)
# splitting
wholesale_train <- wholesale_clean[index,]
wholesale_test <- wholesale_clean[-index,]
prop.table(table(wholesale_train$Channel))
RNGkind(sample.kind = "Rounding")
set.seed(100)
library(caret)
wholesale_train_up <- upSample(x = wholesale_train %>% select(-Channel),
y = wholesale_train$Channel,
yname = "Channel")
prop.table(table(wholesale_train_up$Channel))
model_logistic <- glm(Channel ~ ., wholesale_train_up, family = "binomial")
summary(model_logistic)
model_step <- step(model_logistic, direction = "backward", trace = F)
summary(model_step)
pred_test_Log$Prob_Channel <- predict(model_step, wholesale_test, type = "response")
pred_test_Log$Prob_Channel <- predict(model_step, wholesale_test, type = "response")
pred_test_Log <- predict(model_step, wholesale_test, type = "response")
ggplot(wholesale_test, aes(x=pred_test_Log)) +
geom_density(lwd=0.5) +
labs(title = "Distribution Prediction Data Channel") +
theme_minimal()
pred_wholesale_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
confusionMatrix(pred_wholesale_test, wholesale_test$Channel, positive = "Retail")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
library(tidyverse)
library(caret)
library(plotly)
library(ggplot2)
library(GGally)
library(dplyr)
library(car)
library(class)
library(lmtest)
library(gtools)
wholesale <- read.csv("wholesale.csv")
head(wholesale)
glimpse(wholesale)
wholesale_clean <- wholesale %>%
mutate(Channel = ifelse(Channel == 1, "Horeca", "Retail")) %>%
mutate(Channel = as.factor(Channel),
Region = as.factor(Region))
colSums(is.na(wholesale_clean))
summary(wholesale_clean)
RNGkind(sample.kind = "Rounding")
set.seed(123)
# index sampling
index <- sample(nrow(wholesale_clean), nrow(wholesale_clean)*0.8)
# splitting
wholesale_train <- wholesale_clean[index,]
wholesale_test <- wholesale_clean[-index,]
prop.table(table(wholesale_train$Channel))
RNGkind(sample.kind = "Rounding")
set.seed(100)
library(caret)
wholesale_train_up <- upSample(x = wholesale_train %>% select(-Channel),
y = wholesale_train$Channel,
yname = "Channel")
prop.table(table(wholesale_train_up$Channel))
model_logistic <- glm(Channel ~ ., wholesale_train_up, family = "binomial")
summary(model_logistic)
model_step <- step(model_logistic, direction = "backward", trace = F)
summary(model_step)
pred_test_Log$prob_channel <- predict(model_step, type = "response", newdata = wholesale_test)
pred_test_Log$prob_channel <- predict(model_step, type = "response", newdata = wholesale_test)
wholesale_test$prob_channel <- predict(model_step, type = "response", newdata = wholesale_test)
ggplot(wholesale_test, aes(x=prob_channel)) +
geom_density(lwd=0.5) +
labs(title = "Distribution Prediction Data Channel") +
theme_minimal()
wholesale_test$pred_channel <- factor(ifelse(wholesale_test$prob_channel > 0.5, "Retil","Horeca"))
wholesale_test[1:10, c("pred_channel", "Channel")]
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conf
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Horeca")
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
library(tidyverse)
library(caret)
library(plotly)
library(ggplot2)
library(GGally)
library(dplyr)
library(car)
library(class)
library(lmtest)
library(gtools)
wholesale <- read.csv("wholesale.csv")
head(wholesale)
glimpse(wholesale)
wholesale_clean <- wholesale %>%
mutate(Channel = ifelse(Channel == 1, "Horeca", "Retail")) %>%
mutate(Channel = as.factor(Channel),
Region = as.factor(Region))
colSums(is.na(wholesale_clean))
summary(wholesale_clean)
RNGkind(sample.kind = "Rounding")
set.seed(123)
# index sampling
index <- sample(nrow(wholesale_clean), nrow(wholesale_clean)*0.8)
# splitting
wholesale_train <- wholesale_clean[index,]
wholesale_test <- wholesale_clean[-index,]
prop.table(table(wholesale_train$Channel))
RNGkind(sample.kind = "Rounding")
set.seed(100)
library(caret)
wholesale_train_up <- upSample(x = wholesale_train %>% select(-Channel),
y = wholesale_train$Channel,
yname = "Channel")
prop.table(table(wholesale_train_up$Channel))
model_logistic <- glm(Channel ~ ., wholesale_train_up, family = "binomial")
summary(model_logistic)
model_step <- step(model_logistic, direction = "backward", trace = F)
summary(model_step)
wholesale_test$prob_channel <- predict(model_step, type = "response", newdata = wholesale_test)
ggplot(wholesale_test, aes(x=prob_channel)) +
geom_density(lwd=0.5) +
labs(title = "Distribution Prediction Data Channel") +
theme_minimal()
wholesale_test$pred_channel <- factor(ifelse(wholesale_test$prob_channel > 0.5, "Retil","Horeca"))
wholesale_test[1:10, c("pred_channel", "Channel")]
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conmat <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
wholesale_conf <- confusionMatrix(wholesale_test, wholesale_test, positive = "Retail")
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conf <- confusionMatrix(wholesale_test$pred_channel, wholesale_test$Channel, positive = "Retail")
library(caret)
wholesale_conf <- confusionMatrix(data = wholesale_test$pred_channel, reference = wholesale_test$Channel, positive = "Retail")
wholesale_conf <- confusionMatrix(data = wholesale_test$pred_channel, reference = wholesale_test$Channel, positive = "Retail")
wholesale_test$pred_channel <- factor(ifelse(wholesale_test$prob_channel > 0.5, "Retil","Horeca"))
wholesale_test[, c("pred_channel", "Channel")]
wholesale_conf <- confusionMatrix(data = wholesale_test$pred_channel, reference = wholesale_test$Channel, positive = "Retail")
wholesale_conf <- confusionMatrix(data = wholesale_test$pred_channel, reference = wholesale_test$Channel, positive = "Retail")
wholesale_test$prob_channel <- predict(model_step, newdata = wholesale_test, type = "response")
ggplot(wholesale_test, aes(x=prob_channel)) +
geom_density(lwd=0.5) +
labs(title = "Distribution Prediction Data Channel") +
theme_minimal()
wholesale_test$pred_channel <- factor(ifelse(wholesale_test$prob_channel > 0.5, "Retil","Horeca"))
wholesale_test[, c("pred_channel", "Channel")]
head(wholesale_test)
wholesale_conf <- confusionMatrix(data = wholesale_test$pred_channel, reference = wholesale_test$Channel)
wholesale_predict <- predict(model_step, newdata = wholesale_test, type = "response")
ggplot(wholesale_predict, aes(x=wholesale_predict)) +
geom_density(lwd=0.5) +
labs(title = "Distribution Prediction Data Channel") +
theme_minimal()
pred_test_Log <- predict(model_step, type = "response", newdata = wholesale_test)
ggplot(wholesale_test, aes(x=pred_test_Log)) +
geom_density(lwd=0.5) +
labs(title = "Distribution Prediction Data Channel") +
theme_minimal()
pred_wholesale_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
confusionMatrix(pred_wholesale_test, wholesale_test$Channel, positive = "Retail")
pred_wholesale_test
confusionMatrix(pred_wholesale_test, wholesale_test$Channel, positive = "Horeca")
confusionMatrix(pred_wholesale_test, wholesale_test$Channel, positive = "Retail")
pred_wholesale_test <- ifelse(pred_test_Log > 0.5, "Retail", "Horeca") %>% as.factor()
Recall <- round(24/(24+7),2)
Specificity <- round((54)/(3+54),2)
Accuracy <- round((54+24)/nrow(wholesale_test),2)
Precision <- round(24/(24+3),2)
performance <- cbind.data.frame(Accuracy, Recall, Precision, Specificity)
performance
performa <- function(cutoff, prob, ref, postarget, negtarget)
{
predict <- factor(ifelse(prob >= cutoff, postarget, negtarget))
conf <- caret::confusionMatrix(predict , ref, positive = postarget)
acc <- conf$overall[1]
rec <- conf$byClass[1]
prec <- conf$byClass[3]
spec <- conf$byClass[2]
mat <- t(as.matrix(c(rec , acc , prec, spec)))
colnames(mat) <- c("recall", "accuracy", "precicion", "specificity")
return(mat)
}
co <- seq(0.01,0.80,length=100)
result <- matrix(0,100,4)
for(i in 1:100){
result[i,] = performa(cutoff = co[i],
prob = pred_wholesale_test,
ref = wholesale_test$Channel,
postarget = "Retail",
negtarget = "Horeca")
}
performa <- function(cutoff, prob, ref, postarget, negtarget)
{
predict <- factor(ifelse(prob >= cutoff, postarget, negtarget))
conf <- caret::confusionMatrix(predict , ref, positive = postarget)
acc <- conf$overall[1]
rec <- conf$byClass[1]
prec <- conf$byClass[3]
spec <- conf$byClass[2]
mat <- t(as.matrix(c(rec , acc , prec, spec)))
colnames(mat) <- c("recall", "accuracy", "precicion", "specificity")
return(mat)
}
co <- seq(0.01,0.80,length=100)
result <- matrix(0,100,4)
for(i in 1:100){
result[i,] = performa(cutoff = co[i],
prob = pred_wholesale_test,
ref = wholesale_test$Channel,
postarget = "Retail",
negtarget = "Horeca")
}
confusionMatrix(pred_wholesale_test, wholesale_test$Channel, positive = "Retail")
performa <- function(cutoff, prob, ref, postarget, negtarget)
{
predict <- factor(ifelse(prob >= cutoff, postarget, negtarget))
conf <- caret::confusionMatrix(predict , ref, positive = postarget)
acc <- conf$overall[1]
rec <- conf$byClass[1]
prec <- conf$byClass[3]
spec <- conf$byClass[2]
mat <- t(as.matrix(c(rec , acc , prec, spec)))
colnames(mat) <- c("recall", "accuracy", "precicion", "specificity")
return(mat)
}
co <- seq(0.01,0.80,length=100)
result <- matrix(0,100,4)
for(i in 1:100){
result[i,] = performa(cutoff = co[i],
prob = pred_wholesale_test,
ref = wholesale_test$Channel,
postarget = "Retail",
negtarget = "Horeca")
}
performa <- function(cutoff, prob, ref, postarget, negtarget)
{
predict <- factor(ifelse(prob >= cutoff, postarget, negtarget))
conf <- caret::confusionMatrix(predict , ref, positive = postarget)
acc <- conf$overall[1]
rec <- conf$byClass[1]
prec <- conf$byClass[3]
spec <- conf$byClass[2]
mat <- t(as.matrix(c(rec , acc , prec, spec)))
colnames(mat) <- c("recall", "accuracy", "precicion", "specificity")
return(mat)
}
co <- seq(0.01,0.80,length=100)
result <- matrix(0,100,4)
for(i in 1:100){
result[i,] = performa(cutoff = co[i],
prob = pred_wholesale_test,
ref = wholesale_test$Channel,
postarget = "Retail",
negtarget = "Horeca")
}
performa <- function(cutoff, prob, ref, postarget, negtarget)
{
predict <- factor(ifelse(prob >= cutoff, postarget, negtarget))
conf <- caret::confusionMatrix(predict , ref, positive = postarget)
acc <- conf$overall[1]
rec <- conf$byClass[1]
prec <- conf$byClass[3]
spec <- conf$byClass[2]
mat <- t(as.matrix(c(rec , acc , prec, spec)))
colnames(mat) <- c("recall", "accuracy", "precicion", "specificity")
return(mat)
}
co <- seq(0.01,0.80,length=88)
result <- matrix(0,88,4)
for(i in 1:88){
result[i,] = performa(cutoff = co[i],
prob = pred_wholesale_test,
ref = wholesale_test$Channel,
postarget = "Retail",
negtarget = "Horeca")
}
head(pred_wholesale_test)
confusionMatrix(pred_test_Log, wholesale_test$Channel, positive = "Retail")
confusionMatrix(pred_wholesale_test, wholesale_test$Channel, positive = "Retail")
performa <- function(cutoff, prob, ref, postarget, negtarget)
{
predict <- factor(ifelse(prob >= cutoff, postarget, negtarget))
conf <- caret::confusionMatrix(predict , ref, positive = postarget)
acc <- conf$overall[1]
rec <- conf$byClass[1]
prec <- conf$byClass[3]
spec <- conf$byClass[2]
mat <- t(as.matrix(c(rec , acc , prec, spec)))
colnames(mat) <- c("recall", "accuracy", "precicion", "specificity")
return(mat)
}
co <- seq(0.01,0.80,length=100)
result <- matrix(0,100,4)
for(i in 1:100){
result[i,] = performa(cutoff = co[i],
prob = pred_test_Log,
ref = wholesale_test$Channel,
postarget = "Retail",
negtarget = "Horeca")
}
data_frame("Recall" = result[,1],
"Accuracy" = result[,2],
"Precision" = result[,3],
"Specificity" = result[,4],
"Cutoff" = co) %>%
gather(key = "performa", value = "value", 1:4) %>%
ggplot(aes(x = Cutoff, y = value, col = performa)) +
geom_line(lwd = 1.5) +
scale_color_manual(values = c("darkred","darkgreen","orange", "blue")) +
scale_y_continuous(breaks = seq(0,1,0.1), limits = c(0,1)) +
scale_x_continuous(breaks = seq(0,1,0.1)) +
labs(title = "Tradeoff model perfomance") +
theme_minimal() +
theme(legend.position = "top",
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank())
# Odds ratio all coefficients
exp(model_step) %>%
data.frame()
# Odds ratio all coefficients
exp(model_step$coefficients) %>%
data.frame()
exp(-0.9220)
head(wholesale_clean)
glimpse(wholesale_clean)
wholesale_knn <- wholesale_clean %>% select(-Region)
prop.table(table(wholesale_knn$Channel))
RNGkind(sample.kind = "Rounding")
set.seed(123)
# index sampling
index <- sample(nrow(wholesale_knn), nrow(wholesale_knn)*0.8)
# splitting
wholesale_knn_train <- wholesale_knn[index,]
wholesale_knn_test <- wholesale_knn[-index,] # data yang tidak masuk train
prop.table(table(wholesale_knn_train$Channel))
RNGkind(sample.kind = "Rounding")
set.seed(100)
library(caret)
wholesale_knn_train_up <- upSample(x = wholesale_knn_train %>% select(-Channel),
y = wholesale_knn_train$Channel,
yname = "Channel")
prop.table(table(wholesale_knn_train_up$Channel))
# prediktor data train
wholesale_knn_train_x <- wholesale_knn_train_up %>% select_if(is.numeric)
# target data train
wholesale_knn_train_y <- wholesale_knn_train_up[,"Channel"]
# prediktor data test
wholesale_knn_test_x <- wholesale_knn_test %>% select_if(is.numeric)
# target data test
wholesale_knn_test_y <- wholesale_knn_test[,"Channel"]
# scaling data
# train
wholesale_knn_train_xs <- scale(x = wholesale_knn_train_x) # data prediktor untuk data train
# test
wholesale_knn_test_xs <- scale(x = wholesale_knn_test_x,
center = attr(wholesale_knn_train_xs, "scaled:center"), #nilai rata rata data
scale = attr(wholesale_knn_train_xs,"scaled:scale")) # nilai data train
sqrt(nrow(wholesale_knn_train))
library(class)
pred_knn_wholsesale <- knn(train = wholesale_knn_train_xs, # prediktor data train
test = wholesale_knn_test_xs, # prediktor data test
cl = wholesale_knn_train_y, # label dari data train
k = 19)
head(pred_knn_wholsesale)
# confusion matrix
library(caret)
confusionMatrix(pred_knn_wholsesale, wholesale_knn_test_y, positive = "Retail")
wholesale_log_con <- confusionMatrix(pred_wholesale_test, wholesale_test$Channel, positive = "Retail")
wholesale_log_con
wholesale_knn_conf
# confusion matrix
library(caret)
wholesale_knn_conf <- confusionMatrix(pred_knn_wholsesale, wholesale_knn_test_y, positive = "Retail")
wholesale_knn_conf
eval_wholesale_log <- data_frame(Accuracy = wholesale_log_con$overall[1],
Recall = wholesale_log_con$byClass[1],
Specificity = wholesale_log_con$byClass[2],
Precision = wholesale_log_con$byClass[3])
eval_wholesale_knn <- data_frame(Accuracy = wholesale_knn_conf$overall[1],
Recall = wholesale_knn_conf$byClass[1],
Specificity = wholesale_knn_conf$byClass[2],
Precision = wholesale_knn_conf$byClass[3])
# Model Evaluation Logistic Regretion
eval_wholesale_log
# Model Evaluation K-NN
eval_wholesale_knn
